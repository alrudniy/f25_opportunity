<?xml version='1.0' encoding='utf-8'?>
<files root="C:\GoogleDrive\- - Drew courses\- 2025-3 Fall\CSCI 340\proj-oppo-web">
  <file path="bootstrap.py" encoding="text">#!/usr/bin/env python3
"""
One-shot Python bootstrap for the Opportunity App Django project.

What it does:
- Creates a Python venv and installs: Django, psycopg2-binary, python-dotenv
- Creates Django project + two apps: accounts, pages
- Configures Postgres (34.16.174.60 / oppo_app / CSCI340Fall2025) via .env
- Implements custom User model with user_type (student, organization, administrator) and email login
- Adds Login + Create Account screens
- Adds Screen 1 ("Hello {User's Name}") with buttons to Screen 2 and Screen 3, and simple navigation
- Creates minimal templates and CSS

Usage:
    python bootstrap.py

Notes:
- If the remote DB is unreachable during migration, you'll see a helpful message.
- Re-run migrations later with: source .venv/bin/activate &amp;&amp; python manage.py migrate
"""
import os
import sys
import platform
import subprocess
from pathlib import Path
from textwrap import dedent

PROJECT = "opportunity_app"  # Django settings package name
VENV_DIR = Path(".venv")

def is_windows() -&gt; bool:
    return os.name == "nt" or platform.system().lower().startswith("win")

def venv_python() -&gt; Path:
    if is_windows():
        return VENV_DIR / "Scripts" / "python.exe"
    return VENV_DIR / "bin" / "python"

def run(cmd, cwd=None, env=None, check=True):
    print(f"&gt;&gt; {' '.join(str(c) for c in cmd)}")
    return subprocess.run(cmd, cwd=cwd, env=env, check=check)

def write(path: Path, content: str):
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")
    print(f"   wrote {path}")

def main():
    cwd = Path.cwd()
    print(f"== Bootstrap in {cwd}")

    # 1) Create venv
    if not VENV_DIR.exists():
        print("&gt;&gt; Creating virtualenv")
        run([sys.executable, "-m", "venv", str(VENV_DIR)])
    else:
        print("&gt;&gt; Virtualenv exists; continuing")

    py = venv_python()
    if not py.exists():
        print("!! Could not find interpreter in venv:", py)
        sys.exit(1)

    # 2) Install dependencies
    print("&gt;&gt; Upgrading pip / installing dependencies")
    run([str(py), "-m", "pip", "install", "--upgrade", "pip"])
    run([str(py), "-m", "pip", "install", "Django&gt;=5.0,&lt;6.0", "psycopg2-binary", "python-dotenv"])

    # 3) Start Django project (if not present)
    if not (cwd / "manage.py").exists():
        print("&gt;&gt; Creating Django project")
        run([str(py), "-m", "django", "startproject", PROJECT, "."])
    else:
        print("&gt;&gt; manage.py exists; skipping startproject")

    # 4) Create apps
    if not (cwd / "accounts").exists():
        print("&gt;&gt; Creating 'accounts' app")
        run([str(py), "manage.py", "startapp", "accounts"])
    else:
        print("&gt;&gt; 'accounts' app exists; skipping")

    if not (cwd / "pages").exists():
        print("&gt;&gt; Creating 'pages' app")
        run([str(py), "manage.py", "startapp", "pages"])
    else:
        print("&gt;&gt; 'pages' app exists; skipping")

    # 5) .env with DB settings
    write(cwd / ".env", dedent("""\
        DJANGO_SECRET_KEY=dev-insecure-change-me
        DJANGO_DEBUG=True
        DB_NAME=opportunity_db
        DB_USER=oppo_app
        DB_PASSWORD=CSCI340Fall2025
        DB_HOST=34.16.174.60
        DB_PORT=5432
        ALLOWED_HOSTS=127.0.0.1,localhost
    """))

    # 6) settings.py
    settings_py = dedent(f"""\
        from pathlib import Path
        import os
        from dotenv import load_dotenv

        BASE_DIR = Path(__file__).resolve().parent.parent
        load_dotenv(BASE_DIR / '.env')

        SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'dev-insecure-change-me')
        DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() == 'true'
        ALLOWED_HOSTS = [h.strip() for h in os.getenv('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',') if h.strip()]

        INSTALLED_APPS = [
            'django.contrib.admin','django.contrib.auth','django.contrib.contenttypes',
            'django.contrib.sessions','django.contrib.messages','django.contrib.staticfiles',
            'accounts','pages',
        ]

        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]

        ROOT_URLCONF = '{PROJECT}.urls'
        TEMPLATES = [{{
            'BACKEND':'django.template.backends.django.DjangoTemplates',
            'DIRS':[BASE_DIR/'templates'],
            'APP_DIRS':True,
            'OPTIONS':{{
                'context_processors':[
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            }},
        }}]
        WSGI_APPLICATION = '{PROJECT}.wsgi.application'

        DATABASES = {{
            'default': {{
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('DB_NAME','opportunity_db'),
                'USER': os.getenv('DB_USER','oppo_app'),
                'PASSWORD': os.getenv('DB_PASSWORD','CSCI340Fall2025'),
                'HOST': os.getenv('DB_HOST','34.16.174.60'),
                'PORT': int(os.getenv('DB_PORT','5432')),
                'CONN_MAX_AGE': 60,
            }}
        }}

        AUTH_USER_MODEL = 'accounts.User'

        AUTH_PASSWORD_VALIDATORS = [
            {{'NAME':'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'}},
            {{'NAME':'django.contrib.auth.password_validation.MinimumLengthValidator','OPTIONS':{{'min_length':8}}}},
            {{'NAME':'django.contrib.auth.password_validation.CommonPasswordValidator'}},
            {{'NAME':'django.contrib.auth.password_validation.NumericPasswordValidator'}},
        ]

        LANGUAGE_CODE = 'en-us'
        TIME_ZONE = 'UTC'
        USE_I18N = True
        USE_TZ = True

        STATIC_URL = '/static/'
        STATICFILES_DIRS = [BASE_DIR / 'static']

        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

        LOGIN_URL = 'login'
        LOGIN_REDIRECT_URL = 'screen1'
        LOGOUT_REDIRECT_URL = 'login'
    """)
    write(cwd / PROJECT / "settings.py", settings_py)

    # 7) root urls.py
    urls_root = dedent("""\
        from django.contrib import admin
        from django.urls import path, include

        urlpatterns = [
            path('admin/', admin.site.urls),
            path('', include('pages.urls')),
            path('accounts/', include('accounts.urls')),
        ]
    """)
    write(cwd / PROJECT / "urls.py", urls_root)

    # 8) accounts app files
    accounts_models = dedent("""\
        from django.contrib.auth.models import AbstractUser
        from django.db import models

        class User(AbstractUser):
            class UserType(models.TextChoices):
                STUDENT = 'student', 'Student'
                ORGANIZATION = 'organization', 'Organization'
                ADMINISTRATOR = 'administrator', 'Administrator'

            user_type = models.CharField(max_length=20, choices=UserType.choices, default=UserType.STUDENT)
            email = models.EmailField(unique=True)

            USERNAME_FIELD = 'email'
            REQUIRED_FIELDS = ['username']  # keep username for admin compatibility

            def save(self, *args, **kwargs):
                if not self.username:
                    self.username = self.email
                super().save(*args, **kwargs)

            @property
            def display_name(self):
                full = f"{self.first_name} {self.last_name}".strip()
                return full if full else self.email
    """)
    write(cwd / "accounts" / "models.py", accounts_models)

    accounts_forms = dedent("""\
        from django import forms
        from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
        from .models import User

        class UserRegistrationForm(UserCreationForm):
            user_type = forms.ChoiceField(choices=User.UserType.choices, widget=forms.RadioSelect)

            class Meta:
                model = User
                fields = ('email', 'password1', 'password2', 'user_type')

        class EmailAuthenticationForm(AuthenticationForm):
            # Field is still named "username" internally; label it clearly as Email.
            def __init__(self, *args, **kwargs):
                super().__init__(*args, **kwargs)
                self.fields['username'].label = 'Email'
                self.fields['username'].widget.attrs.update({'placeholder': 'you@example.com', 'autofocus': True})
                self.fields['password'].widget.attrs.update({'placeholder': 'password'})
    """)
    write(cwd / "accounts" / "forms.py", accounts_forms)

    accounts_views = dedent("""\
        from django.contrib.auth import login as auth_login
        from django.contrib.auth.views import LoginView
        from django.urls import reverse_lazy
        from django.views.generic import FormView
        from .forms import UserRegistrationForm, EmailAuthenticationForm

        class RegisterView(FormView):
            template_name = 'accounts/register.html'
            form_class = UserRegistrationForm
            success_url = reverse_lazy('screen1')

            def form_valid(self, form):
                user = form.save()
                auth_login(self.request, user)
                return super().form_valid(form)

            def get_initial(self):
                initial = super().get_initial()
                user_type = self.request.GET.get('type') or self.request.session.get('selected_user_type')
                if user_type:
                    initial['user_type'] = user_type
                return initial

        class CustomLoginView(LoginView):
            template_name = 'accounts/login.html'
            authentication_form = EmailAuthenticationForm
            redirect_authenticated_user = True

            def get_success_url(self):
                return reverse_lazy('screen1')

            def get_context_data(self, **kwargs):
                context = super().get_context_data(**kwargs)
                user_type = self.request.GET.get('type')
                if user_type:
                    self.request.session['selected_user_type'] = user_type
                context['selected_user_type'] = user_type
                return context
    """)
    write(cwd / "accounts" / "views.py", accounts_views)

    accounts_urls = dedent("""\
        from django.urls import path
        from django.contrib.auth.views import LogoutView
        from .views import RegisterView, CustomLoginView

        urlpatterns = [
            path('login/', CustomLoginView.as_view(), name='login'),
            path('register/', RegisterView.as_view(), name='register'),
            path('logout/', LogoutView.as_view(), name='logout'),
        ]
    """)
    write(cwd / "accounts" / "urls.py", accounts_urls)

    accounts_admin = dedent("""\
        from django.contrib import admin
        from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
        from django.utils.translation import gettext_lazy as _
        from .models import User

        @admin.register(User)
        class UserAdmin(BaseUserAdmin):
            fieldsets = (
                (None, {'fields': ('email', 'password')}),
                (_('Personal info'), {'fields': ('first_name', 'last_name')}),
                (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
                (_('Important dates'), {'fields': ('last_login', 'date_joined')}),
                (_('Meta'), {'fields': ('user_type', 'username')}),
            )
            add_fieldsets = (
                (None, {'classes': ('wide',), 'fields': ('email', 'password1', 'password2', 'user_type')}),
            )
            list_display = ('email', 'user_type', 'is_staff', 'is_active')
            search_fields = ('email', 'first_name', 'last_name')
            ordering = ('email',)
    """)
    write(cwd / "accounts" / "admin.py", accounts_admin)

    # 9) pages app files
    pages_views = dedent("""\
        from django.shortcuts import render
        from django.contrib.auth.decorators import login_required

        def welcome(request):
            return render(request, 'pages/welcome.html')

        @login_required
        def screen1(request):
            return render(request, 'pages/screen1.html')

        @login_required
        def screen2(request):
            return render(request, 'pages/screen2.html')

        @login_required
        def screen3(request):
            return render(request, 'pages/screen3.html')
    """)
    write(cwd / "pages" / "views.py", pages_views)

    pages_urls = dedent("""\
        from django.urls import path
        from . import views

        urlpatterns = [
            path('', views.welcome, name='welcome'),
            path('screen1/', views.screen1, name='screen1'),
            path('screen2/', views.screen2, name='screen2'),
            path('screen3/', views.screen3, name='screen3'),
        ]
    """)
    write(cwd / "pages" / "urls.py", pages_urls)

    # 10) templates &amp; static
    write(cwd / "static" / "css" / "styles.css", dedent("""\
        * { box-sizing: border-box; }
        body { margin:0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; background:#f7f7fb; color:#111; }
        .container { max-width: 960px; margin: 0 auto; padding: 1.25rem; }
        .site-header { background:#fff; border-bottom:1px solid #e5e7eb; position: sticky; top:0; }
        .header-inner { display:flex; align-items:center; justify-content:space-between; }
        .brand { font-weight:700; text-decoration:none; color:#111; }
        .nav { list-style:none; display:flex; gap:.75rem; margin:0; padding:0; align-items:center; }
        .nav .divider { width:1px; background:#e5e7eb; height:22px; margin:0 .5rem; }
        .nav a { text-decoration:none; color:#0f172a; padding:.4rem .6rem; border-radius:.4rem; }
        .nav a:hover { background:#f1f5f9; }
        .nav .muted { color:#475569; padding:.4rem .6rem; }
        .site-footer { margin-top:3rem; padding:1rem 0; color:#6b7280; }
        .auth-card, .dash-card { background:#fff; border:1px solid #e5e7eb; border-radius:.8rem; padding:2rem; margin-top:2rem; }
        h1 { margin-top:0; }
        .form-field { margin-bottom:1rem; display:flex; flex-direction:column; }
        .form-field input[type="text"], .form-field input[type="email"], .form-field input[type="password"] { padding:.6rem .7rem; border:1px solid #cbd5e1; border-radius:.5rem; }
        fieldset.form-field { border:1px solid #e5e7eb; border-radius:.6rem; padding:.75rem 1rem; }
        .button-row { display:flex; gap:.75rem; flex-wrap:wrap; margin-top:1rem; }
        .btn { display:inline-block; background:#111827; color:#fff; text-decoration:none; padding:.6rem .9rem; border-radius:.6rem; }
        .btn.primary { background:#2563eb; }
        .btn:hover { filter:brightness(1.05); }
        .muted { color:#64748b; }
        .error { color:#b91c1c; font-size:.9rem; margin-top:.25rem; }
        .messages { list-style:none; padding:0; }
        .messages li { background:#ecfeff; border:1px solid #22d3ee; color:#0e7490; padding:.6rem .9rem; border-radius:.5rem; margin:.5rem 0; }
    """))

    base_html = dedent("""\
        {% load static %}
        &lt;!doctype html&gt;
        &lt;html lang="en"&gt;
        &lt;head&gt;
          &lt;meta charset="utf-8"/&gt;
          &lt;title&gt;Opportunity App&lt;/title&gt;
          &lt;meta name="viewport" content="width=device-width, initial-scale=1"/&gt;
          &lt;link rel="stylesheet" href="{% static 'css/styles.css' %}"&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;header class="site-header"&gt;
            &lt;div class="container header-inner"&gt;
              &lt;a class="brand" href="{% url 'welcome' %}"&gt;Opportunity App&lt;/a&gt;
              &lt;nav&gt;
                &lt;ul class="nav"&gt;
                  {% if user.is_authenticated %}
                    &lt;li&gt;&lt;a href="{% url 'screen1' %}"&gt;Screen 1&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href="{% url 'screen2' %}"&gt;Screen 2&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href="{% url 'screen3' %}"&gt;Screen 3&lt;/a&gt;&lt;/li&gt;
                    &lt;li class="divider"&gt;&lt;/li&gt;
                    &lt;li class="muted"&gt;Hi, {{ user.display_name }}&lt;/li&gt;
                    &lt;li&gt;&lt;a href="{% url 'logout' %}"&gt;Log out&lt;/a&gt;&lt;/li&gt;
                  {% else %}
                    &lt;li&gt;&lt;a href="{% url 'login' %}"&gt;Log in&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href="{% url 'register' %}"&gt;Create account&lt;/a&gt;&lt;/li&gt;
                  {% endif %}
                &lt;/ul&gt;
              &lt;/nav&gt;
            &lt;/div&gt;
          &lt;/header&gt;

          &lt;main class="container"&gt;
            {% if messages %}
              &lt;ul class="messages"&gt;
                {% for message in messages %}
                  &lt;li class="{{ message.tags }}"&gt;{{ message }}&lt;/li&gt;
                {% endfor %}
              &lt;/ul&gt;
            {% endif %}
            {% block content %}{% endblock %}
          &lt;/main&gt;

          &lt;footer class="site-footer"&gt;
            &lt;div class="container"&gt;
              &lt;small&gt;&amp;copy; {% now "Y" %} Opportunity App&lt;/small&gt;
            &lt;/div&gt;
          &lt;/footer&gt;
        &lt;/body&gt;
        &lt;/html&gt;
    """)
    write(cwd / "templates" / "base.html", base_html)

    welcome_html = dedent("""\
        {% extends "base.html" %}
        {% block content %}
          &lt;section class="auth-card"&gt;
            &lt;h1&gt;Welcome&lt;/h1&gt;
            &lt;p&gt;Please choose your user type to continue.&lt;/p&gt;
            &lt;div class="button-row"&gt;
              &lt;a class="btn" href="{% url 'login' %}?type=student"&gt;I am a Student&lt;/a&gt;
              &lt;a class="btn" href="{% url 'login' %}?type=organization"&gt;I am an Organization&lt;/a&gt;
              &lt;a class="btn" href="{% url 'login' %}?type=administrator"&gt;I am an Administrator&lt;/a&gt;
            &lt;/div&gt;
            &lt;p class="muted"&gt;No account? &lt;a href="{% url 'register' %}"&gt;Create one&lt;/a&gt;.&lt;/p&gt;
          &lt;/section&gt;
        {% endblock %}
    """)
    write(cwd / "templates" / "pages" / "welcome.html", welcome_html)

    login_html = dedent("""\
        {% extends "base.html" %}
        {% block content %}
          &lt;section class="auth-card"&gt;
            &lt;h1&gt;Sign in{% if selected_user_type %} as {{ selected_user_type|title }}{% endif %}&lt;/h1&gt;
            &lt;form method="post" novalidate&gt;
              {% csrf_token %}
              &lt;div class="form-field"&gt;
                &lt;label for="{{ form.username.id_for_label }}"&gt;{{ form.username.label }}&lt;/label&gt;
                {{ form.username }}
                {% if form.username.errors %}&lt;div class="error"&gt;{{ form.username.errors.0 }}&lt;/div&gt;{% endif %}
              &lt;/div&gt;
              &lt;div class="form-field"&gt;
                &lt;label for="{{ form.password.id_for_label }}"&gt;{{ form.password.label }}&lt;/label&gt;
                {{ form.password }}
                {% if form.password.errors %}&lt;div class="error"&gt;{{ form.password.errors.0 }}&lt;/div&gt;{% endif %}
              &lt;/div&gt;
              &lt;button class="btn primary" type="submit"&gt;Sign in&lt;/button&gt;
            &lt;/form&gt;
            &lt;div class="auth-links"&gt;
              &lt;a href="{% url 'register' %}{% if selected_user_type %}?type={{ selected_user_type }}{% endif %}"&gt;Create account&lt;/a&gt;
            &lt;/div&gt;
          &lt;/section&gt;
        {% endblock %}
    """)
    write(cwd / "templates" / "accounts" / "login.html", login_html)

    register_html = dedent("""\
        {% extends "base.html" %}
        {% block content %}
          &lt;section class="auth-card"&gt;
            &lt;h1&gt;Create Account&lt;/h1&gt;
            &lt;form method="post" novalidate&gt;
              {% csrf_token %}
              &lt;div class="form-field"&gt;
                &lt;label for="{{ form.email.id_for_label }}"&gt;Email&lt;/label&gt;
                {{ form.email }}
                {% if form.email.errors %}&lt;div class="error"&gt;{{ form.email.errors.0 }}&lt;/div&gt;{% endif %}
              &lt;/div&gt;

              &lt;fieldset class="form-field"&gt;
                &lt;legend&gt;User type&lt;/legend&gt;
                {{ form.user_type }}
                {% if form.user_type.errors %}&lt;div class="error"&gt;{{ form.user_type.errors.0 }}&lt;/div&gt;{% endif %}
              &lt;/fieldset&gt;

              &lt;div class="form-field"&gt;
                &lt;label for="{{ form.password1.id_for_label }}"&gt;Password&lt;/label&gt;
                {{ form.password1 }}
                {% if form.password1.errors %}&lt;div class="error"&gt;{{ form.password1.errors.0 }}&lt;/div&gt;{% endif %}
              &lt;/div&gt;
              &lt;div class="form-field"&gt;
                &lt;label for="{{ form.password2.id_for_label }}"&gt;Confirm Password&lt;/label&gt;
                {{ form.password2 }}
                {% if form.password2.errors %}&lt;div class="error"&gt;{{ form.password2.errors.0 }}&lt;/div&gt;{% endif %}
              &lt;/div&gt;

              &lt;button class="btn primary" type="submit"&gt;Create Account&lt;/button&gt;
            &lt;/form&gt;
            &lt;div class="auth-links"&gt;
              &lt;a href="{% url 'login' %}"&gt;Back to sign in&lt;/a&gt;
            &lt;/div&gt;
          &lt;/section&gt;
        {% endblock %}
    """)
    write(cwd / "templates" / "accounts" / "register.html", register_html)

    screen1_html = dedent("""\
        {% extends "base.html" %}
        {% block content %}
          &lt;section class="dash-card"&gt;
            &lt;h1&gt;Hello {{ request.user.display_name }}&lt;/h1&gt;
            &lt;p class="muted"&gt;You are signed in as &lt;strong&gt;{{ request.user.user_type|title }}&lt;/strong&gt;.&lt;/p&gt;
            &lt;div class="button-row"&gt;
              &lt;a class="btn" href="{% url 'screen2' %}"&gt;Go to Screen 2&lt;/a&gt;
              &lt;a class="btn" href="{% url 'screen3' %}"&gt;Go to Screen 3&lt;/a&gt;
            &lt;/div&gt;
          &lt;/section&gt;
        {% endblock %}
    """)
    write(cwd / "templates" / "pages" / "screen1.html", screen1_html)

    screen2_html = dedent("""\
        {% extends "base.html" %}
        {% block content %}
          &lt;section class="dash-card"&gt;
            &lt;h1&gt;Screen 2&lt;/h1&gt;
            &lt;p&gt;This is a placeholder page you can expand later.&lt;/p&gt;
            &lt;div&gt;&lt;a class="btn" href="{% url 'screen1' %}"&gt;← Back to Screen 1&lt;/a&gt;&lt;/div&gt;
          &lt;/section&gt;
        {% endblock %}
    """)
    write(cwd / "templates" / "pages" / "screen2.html", screen2_html)

    screen3_html = dedent("""\
        {% extends "base.html" %}
        {% block content %}
          &lt;section class="dash-card"&gt;
            &lt;h1&gt;Screen 3&lt;/h1&gt;
            &lt;p&gt;This is a placeholder page you can expand later.&lt;/p&gt;
            &lt;div&gt;&lt;a class="btn" href="{% url 'screen1' %}"&gt;← Back to Screen 1&lt;/a&gt;&lt;/div&gt;
          &lt;/section&gt;
        {% endblock %}
    """)
    write(cwd / "templates" / "pages" / "screen3.html", screen3_html)

    # 11) Make migrations and migrate
    print("&gt;&gt; makemigrations (accounts)")
    run([str(py), "manage.py", "makemigrations", "accounts"])

    print("&gt;&gt; migrate")
    try:
        run([str(py), "manage.py", "migrate"])
    except subprocess.CalledProcessError:
        print("!! Migration could not connect to the DB.")
        print("   Ensure Postgres at 34.16.174.60:5432 is reachable and credentials are correct, then run:")
        if is_windows():
            print("   .venv\\Scripts\\python manage.py migrate")
        else:
            print("   source .venv/bin/activate &amp;&amp; python manage.py migrate")

    print("\n&gt;&gt; All set.")
    if is_windows():
        print("   Start server: .venv\\Scripts\\python manage.py runserver")
    else:
        print("   Start server: source .venv/bin/activate &amp;&amp; python manage.py runserver")

if __name__ == "__main__":
    main()
</file>
  <file path="Brandon_Jachera.txt" encoding="text">First commit to the repository!</file>
  <file path="Dylan_Brooks.txt" encoding="text">This is my text file.</file>
  <file path="Georgia_Cross.txt" encoding="text">This is my text file </file>
  <file path="Guanzhou_Shen.txt" encoding="text">This is my text file. That's all.</file>
  <file path="Joshua_JucaCampoverde.txt" encoding="text">This is my text file for task 2</file>
  <file path="manage.py" encoding="text">#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'opportunity_app.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>
  <file path="Maximillian_Juliano.txt" encoding="text">Maximillian Juliano</file>
  <file path="Nakiwe_McDonald.txt" encoding="text">...
</file>
  <file path="pack_dir_to_xml.py" encoding="text">#!/usr/bin/env python3

# Run command: python pack_dir_to_xml.py . combined_files.xml
# To include hidden files (like .gitignore), add the flag:
# python pack_dir_to_xml.py . output.xml --include-hidden
# To skip files larger than a threshold (for example, 1 MB):
# python pack_dir_to_xml.py . output.xml --max-bytes 1000000

import argparse
import base64
import os
import sys
import mimetypes
import xml.etree.ElementTree as ET

def is_text_file(path, sniff_bytes=2048):
    mime, _ = mimetypes.guess_type(path)
    if mime:
        if mime.startswith("text/") or mime in {"application/xml", "application/json"}:
            return True
        if any(path.endswith(ext) for ext in (
            ".py", ".js", ".ts", ".tsx", ".jsx", ".java", ".c", ".cpp", ".h", ".hpp",
            ".cs", ".rb", ".go", ".rs", ".php", ".sh", ".ps1", ".sql", ".r", ".m",
            ".yml", ".yaml", ".toml", ".ini", ".cfg", ".md", ".txt", ".csv", ".tsv",
            ".ipynb", ".css", ".scss", ".less"
        )):
            return True
    try:
        with open(path, "rb") as f:
            chunk = f.read(sniff_bytes)
        return b"\x00" not in chunk
    except Exception:
        return False

def read_file_contents(path, text_encoding="utf-8"):
    if is_text_file(path):
        with open(path, "r", encoding=text_encoding, errors="replace") as f:
            return f.read(), "text"
    else:
        with open(path, "rb") as f:
            b = f.read()
        return base64.b64encode(b).decode("ascii"), "base64"

def build_xml(root_dir, output_xml, include_hidden=False, follow_symlinks=False, exclude_globs=None, max_bytes=None):
    root_dir = os.path.abspath(root_dir)
    if exclude_globs is None:
        exclude_globs = []

    root_elem = ET.Element("files")
    root_elem.set("root", root_dir)

    for dirpath, dirnames, filenames in os.walk(root_dir, followlinks=follow_symlinks):
        # Skip unwanted folders
        dirnames[:] = [d for d in dirnames if d not in {"__pycache__", "venv"}]

        # Optionally skip hidden folders
        if not include_hidden:
            dirnames[:] = [d for d in dirnames if not d.startswith(".")]
            filenames = [f for f in filenames if not f.startswith(".")]

        # Exclude by glob patterns
        def excluded(name):
            from fnmatch import fnmatch
            return any(fnmatch(name, pat) for pat in exclude_globs)

        dirnames[:] = [d for d in dirnames if not excluded(d)]
        filenames = [f for f in filenames if not excluded(f)]

        for fn in filenames:
            # Skip .sqlite3 files
            if fn.lower().endswith(".sqlite3"):
                continue

            full_path = os.path.join(dirpath, fn)
            relpath = os.path.relpath(full_path, root_dir).replace("\\", "/")

            # Skip the output file itself
            if os.path.abspath(full_path) == os.path.abspath(output_xml):
                continue

            # Print progress
            print(f"Processing: {relpath}")

            if max_bytes is not None:
                try:
                    if os.path.getsize(full_path) &gt; max_bytes:
                        el = ET.SubElement(root_elem, "file", attrib={
                            "path": relpath,
                            "encoding": "skipped",
                            "reason": f"size_exceeds_{max_bytes}_bytes"
                        })
                        continue
                except OSError:
                    pass

            try:
                content, enc = read_file_contents(full_path)
            except Exception as e:
                el = ET.SubElement(root_elem, "file", attrib={
                    "path": relpath,
                    "encoding": "error"
                })
                el.text = f"Could not read file: {e}"
                continue

            el = ET.SubElement(root_elem, "file", attrib={
                "path": relpath,
                "encoding": enc
            })
            el.text = content

    tree = ET.ElementTree(root_elem)
    indent_xml(root_elem)
    os.makedirs(os.path.dirname(os.path.abspath(output_xml)), exist_ok=True)
    tree.write(output_xml, encoding="utf-8", xml_declaration=True)

def indent_xml(elem, level=0):
    i = "\n" + level * "  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        for child in elem:
            indent_xml(child, level + 1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

def main():
    parser = argparse.ArgumentParser(
        description="Recursively read files and write a single XML where each &lt;file&gt; element contains contents and a relative path attribute."
    )
    parser.add_argument("root", help="Root directory to scan")
    parser.add_argument("output", help="Path to output XML file")
    parser.add_argument("--include-hidden", action="store_true", help="Include hidden files and folders")
    parser.add_argument("--follow-symlinks", action="store_true", help="Follow symlinks")
    parser.add_argument("--exclude", action="append", default=[], help="Glob pattern to exclude, can be used multiple times")
    parser.add_argument("--max-bytes", type=int, default=None, help="Skip files larger than this many bytes")
    args = parser.parse_args()

    try:
        build_xml(
            root_dir=args.root,
            output_xml=args.output,
            include_hidden=args.include_hidden,
            follow_symlinks=args.follow_symlinks,
            exclude_globs=args.exclude,
            max_bytes=args.max_bytes
        )
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
</file>
  <file path="Quanzhi_Shao.txt" encoding="text">This is Quanzhi Shao’s file for Task 2.
</file>
  <file path="README.md" encoding="text"># Opportunity App

## 🧰 Setup Instructions

### 1. Create and Activate the Virtual Environment
First, create a virtual environment (if not already created) and activate it.

**Windows:**
```bash
python -m venv venv
venv\Scripts\activate
```

**macOS / Linux:**
```bash
python3 -m venv venv
source venv/bin/activate
```

---

### 2. Install Dependencies
After activating the virtual environment, install all required libraries:
```bash
pip install -r requirements.txt
```

If `requirements.txt` is missing or needs updating, follow the steps below.

---

### 3. Generate or Update `requirements.txt`
To record all installed packages so others can recreate your environment:
```bash
pip freeze &gt; requirements.txt
```

If you add new libraries later, rerun this command to update the file.  
Other team members can then install all dependencies with:
```bash
pip install -r requirements.txt
```

---

### 4. Start the Server
Run the Django development server:
```bash
python manage.py runserver
```

Then open your browser and navigate to:  
👉 [http://127.0.0.1:8000/](http://127.0.0.1:8000/)

---

## 👤 Test Accounts

| Role | Email | Password |
|------|--------|-----------|
| Student | student_oppo@drew.edu | 1Opportunity! |
| Organization | org_oppo@drew.edu | 1Opportunity! |
| Administrator | admin_oppo@drew.edu | 1Opportunity! |

---

## ⚙️ Admin Panel

Access the Django admin interface here:  
👉 [http://127.0.0.1:8000/admin](http://127.0.0.1:8000/admin)

**Superuser Credentials**
- **Email:** `super_oppo@drew.edu`  
- **Username:** `super_oppo`  
- **Password:** `1OpportunityApp!`

---

## 💡 Notes
- Always activate your virtual environment before running the server.  
- Stop the server anytime with `Ctrl + C` in the terminal.  
- If dependencies change, rerun `pip freeze &gt; requirements.txt` to update the file.  
- To ensure compatibility, use the same Python version across environments (recommended: Python 3.10+).
</file>
  <file path="Readme_Aira.md" encoding="text">Aira Poticano</file>
  <file path="Readme_brandon.md" encoding="text">Brandon Jachera</file>
  <file path="Readme_DylanB.md" encoding="text">Dylan A. Brooks</file>
  <file path="Readme_Georgia.md" encoding="text">Georgia Cross </file>
  <file path="Readme_GuanzhouShen.md" encoding="text">Guanzhou Shen</file>
  <file path="Readme_Joshua.md" encoding="text">Joshua Juca-Campoverde</file>
  <file path="Readme_MaxJuliano.md" encoding="text">Maximillian Juliano</file>
  <file path="Readme_QuanzhiShao.md" encoding="text">Quanzhi Shao
</file>
  <file path="Readme_Shann.md" encoding="text">Shann Sivajeevan</file>
  <file path="Readme_TylerWerr.md" encoding="text">Tyler Werr</file>
  <file path="requirements.txt" encoding="text">Django&gt;=5.0,&lt;6.0
psycopg2-binary
python-dotenv</file>
  <file path="Shann_Sivajeevan.txt" encoding="text">This is my text file - Shann Sivajeevan</file>
  <file path="test.py" encoding="text">import os

# Define the folder path
base_path = "templates/pages/partials"

# Define the files to create
files = [
    "s1_student.html",
    "s1_organization.html",
    "s1_administrator.html",
    "s2_student.html",
    "s2_organization.html",
    "s2_administrator.html",
    "s3_student.html",
    "s3_organization.html",
    "s3_administrator.html"
]

# Create the directory structure if it doesn't exist
os.makedirs(base_path, exist_ok=True)

# Create each file with a basic placeholder content
for file_name in files:
    file_path = os.path.join(base_path, file_name)
    with open(file_path, "w") as f:
        f.write(f"&lt;h1&gt;{file_name.replace('.html', '').replace('_', ' ').title()}&lt;/h1&gt;\n")
        f.write("&lt;p&gt;This is a placeholder page.&lt;/p&gt;\n")
    print(f"Created: {file_path}")

print("All files created successfully.")
</file>
  <file path="Tyler_Werr.txt" encoding="text">Tyler Werr</file>
  <file path="accounts/admin.py" encoding="text">from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.utils.translation import gettext_lazy as _
from .models import User

@admin.register(User)
class UserAdmin(BaseUserAdmin):
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        (_('Personal info'), {'fields': ('first_name', 'last_name')}),
        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),
        (_('Meta'), {'fields': ('user_type', 'username')}),
    )
    add_fieldsets = (
        (None, {'classes': ('wide',), 'fields': ('email', 'password1', 'password2', 'user_type')}),
    )
    list_display = ('email', 'user_type', 'is_staff', 'is_active')
    search_fields = ('email', 'first_name', 'last_name')
    ordering = ('email',)
</file>
  <file path="accounts/apps.py" encoding="text">from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'
</file>
  <file path="accounts/forms.py" encoding="text">from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from .models import User

class UserRegistrationForm(UserCreationForm):
    user_type = forms.ChoiceField(choices=User.UserType.choices, widget=forms.RadioSelect)

    class Meta:
        model = User
        fields = ('email', 'password1', 'password2', 'user_type')

class EmailAuthenticationForm(AuthenticationForm):
    # Field is still named "username" internally; label it clearly as Email.
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['username'].label = 'Email'
        self.fields['username'].widget.attrs.update({'placeholder': 'you@example.com', 'autofocus': True})
        self.fields['password'].widget.attrs.update({'placeholder': 'password'})
</file>
  <file path="accounts/models.py" encoding="text">from django.contrib.auth.models import AbstractUser
from django.db import models

class User(AbstractUser):
    class UserType(models.TextChoices):
        STUDENT = 'student', 'Student'
        ORGANIZATION = 'organization', 'Organization'
        ADMINISTRATOR = 'administrator', 'Administrator'

    user_type = models.CharField(max_length=20, choices=UserType.choices, default=UserType.STUDENT)
    email = models.EmailField(unique=True)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']  # keep username for admin compatibility

    def save(self, *args, **kwargs):
        if not self.username:
            self.username = self.email
        super().save(*args, **kwargs)

    @property
    def display_name(self):
        full = f"{self.first_name} {self.last_name}".strip()
        return full if full else self.email
</file>
  <file path="accounts/tests.py" encoding="text">from django.test import TestCase

# Create your tests here.
</file>
  <file path="accounts/urls.py" encoding="text">from django.urls import path
from django.contrib.auth.views import LogoutView
from .views import RegisterView, CustomLoginView

urlpatterns = [
    path('login/', CustomLoginView.as_view(), name='login'),
    path('register/', RegisterView.as_view(), name='register'),
    path('logout/', LogoutView.as_view(), name='logout'),
]
</file>
  <file path="accounts/views.py" encoding="text">from django.contrib.auth import login as auth_login
from django.contrib.auth.views import LoginView
from django.urls import reverse_lazy
from django.views.generic import FormView
from .forms import UserRegistrationForm, EmailAuthenticationForm

class RegisterView(FormView):
    template_name = 'accounts/register.html'
    form_class = UserRegistrationForm
    success_url = reverse_lazy('screen1')

    def form_valid(self, form):
        user = form.save()
        auth_login(self.request, user)
        return super().form_valid(form)

    def get_initial(self):
        initial = super().get_initial()
        user_type = self.request.GET.get('type') or self.request.session.get('selected_user_type')
        if user_type:
            initial['user_type'] = user_type
        return initial

class CustomLoginView(LoginView):
    template_name = 'accounts/login.html'
    authentication_form = EmailAuthenticationForm
    redirect_authenticated_user = True

    def get_success_url(self):
        return reverse_lazy('screen1')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user_type = self.request.GET.get('type')
        if user_type:
            self.request.session['selected_user_type'] = user_type
        context['selected_user_type'] = user_type
        return context
</file>
  <file path="accounts/__init__.py" encoding="text" />
  <file path="accounts/migrations/0001_initial.py" encoding="text"># Generated by Django 5.2.7 on 2025-10-22 01:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('organization', 'Organization'), ('administrator', 'Administrator')], default='student', max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
</file>
  <file path="accounts/migrations/__init__.py" encoding="text" />
  <file path="opportunity_app/asgi.py" encoding="text">"""
ASGI config for opportunity_app project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'opportunity_app.settings')

application = get_asgi_application()
</file>
  <file path="opportunity_app/settings.py" encoding="text">from pathlib import Path
import os
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / '.env')

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'dev-insecure-change-me')
DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() == 'true'
ALLOWED_HOSTS = [h.strip() for h in os.getenv('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',') if h.strip()]

INSTALLED_APPS = [
    'django.contrib.admin','django.contrib.auth','django.contrib.contenttypes',
    'django.contrib.sessions','django.contrib.messages','django.contrib.staticfiles',
    'accounts','pages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'opportunity_app.urls'
TEMPLATES = [{
    'BACKEND':'django.template.backends.django.DjangoTemplates',
    'DIRS':[BASE_DIR/'templates'],
    'APP_DIRS':True,
    'OPTIONS':{
        'context_processors':[
            'django.template.context_processors.debug',
            'django.template.context_processors.request',
            'django.contrib.auth.context_processors.auth',
            'django.contrib.messages.context_processors.messages',
        ],
    },
}]
WSGI_APPLICATION = 'opportunity_app.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME','opportunity'),
        'USER': os.getenv('DB_USER','oppo_app'),
        'PASSWORD': os.getenv('DB_PASSWORD','CSCI340Fall2025'),
        'HOST': os.getenv('DB_HOST','34.16.174.60'),
        'PORT': int(os.getenv('DB_PORT','5432')),
        'CONN_MAX_AGE': 60,
    }
}

AUTH_USER_MODEL = 'accounts.User'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME':'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME':'django.contrib.auth.password_validation.MinimumLengthValidator','OPTIONS':{'min_length':8}},
    {'NAME':'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME':'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'screen1'
LOGOUT_REDIRECT_URL = 'login'
</file>
  <file path="opportunity_app/urls.py" encoding="text">from django.contrib import admin
from django.urls import path, include
from django.contrib.auth.views import LogoutView


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('pages.urls')),
    path('accounts/', include('accounts.urls')),
    path('logout/', LogoutView.as_view(next_page='welcome'), name='logout'),
]
</file>
  <file path="opportunity_app/wsgi.py" encoding="text">"""
WSGI config for opportunity_app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'opportunity_app.settings')

application = get_wsgi_application()
</file>
  <file path="opportunity_app/__init__.py" encoding="text" />
  <file path="pages/admin.py" encoding="text">from django.contrib import admin

# Register your models here.
</file>
  <file path="pages/apps.py" encoding="text">from django.apps import AppConfig


class PagesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'pages'
</file>
  <file path="pages/models.py" encoding="text">from django.db import models

# Create your models here.
</file>
  <file path="pages/tests.py" encoding="text">from django.test import TestCase

# Create your tests here.
</file>
  <file path="pages/urls.py" encoding="text">from django.urls import path
from . import views

urlpatterns = [
    path('', views.welcome, name='welcome'),
    path('screen1/', views.screen1, name='screen1'),
    path('screen2/', views.screen2, name='screen2'),
    path('screen3/', views.screen3, name='screen3'),
]
</file>
  <file path="pages/views.py" encoding="text">from django.shortcuts import render
from django.contrib.auth.decorators import login_required

def welcome(request):
    return render(request, 'pages/welcome.html')

@login_required
def screen1(request):
    role = request.user.user_type.title() if hasattr(request.user, 'user_type') else 'User'
    return render(request, 'pages/screen1.html', {'role': role})

@login_required
def screen2(request):
    role = request.user.user_type.title() if hasattr(request.user, 'user_type') else 'User'
    return render(request, 'pages/screen2.html', {'role': role})

@login_required
def screen3(request):
    role = request.user.user_type.title() if hasattr(request.user, 'user_type') else 'User'
    return render(request, 'pages/screen3.html', {'role': role})
</file>
  <file path="pages/__init__.py" encoding="text" />
  <file path="pages/migrations/__init__.py" encoding="text" />
  <file path="static/css/styles.css" encoding="text">* { box-sizing: border-box; }
body { margin:0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; background:#f7f7fb; color:#111; }
.container { max-width: 960px; margin: 0 auto; padding: 1.25rem; }
.site-header { background:#fff; border-bottom:1px solid #e5e7eb; position: sticky; top:0; }
.header-inner { display:flex; align-items:center; justify-content:space-between; }
.brand { font-weight:700; text-decoration:none; color:#111; }
.nav { list-style:none; display:flex; gap:.75rem; margin:0; padding:0; align-items:center; }
.nav .divider { width:1px; background:#e5e7eb; height:22px; margin:0 .5rem; }
.nav a { text-decoration:none; color:#0f172a; padding:.4rem .6rem; border-radius:.4rem; }
.nav a:hover { background:#f1f5f9; }
.nav .muted { color:#475569; padding:.4rem .6rem; }
.site-footer { margin-top:3rem; padding:1rem 0; color:#6b7280; }
.auth-card, .dash-card { background:#fff; border:1px solid #e5e7eb; border-radius:.8rem; padding:2rem; margin-top:2rem; }
h1 { margin-top:0; }
.form-field { margin-bottom:1rem; display:flex; flex-direction:column; }
.form-field input[type="text"], .form-field input[type="email"], .form-field input[type="password"] { padding:.6rem .7rem; border:1px solid #cbd5e1; border-radius:.5rem; }
fieldset.form-field { border:1px solid #e5e7eb; border-radius:.6rem; padding:.75rem 1rem; }
.button-row { display:flex; gap:.75rem; flex-wrap:wrap; margin-top:1rem; }
.btn { display:inline-block; background:#111827; color:#fff; text-decoration:none; padding:.6rem .9rem; border-radius:.6rem; }
.btn.primary { background:#2563eb; }
.btn:hover { filter:brightness(1.05); }
.muted { color:#64748b; }
.error { color:#b91c1c; font-size:.9rem; margin-top:.25rem; }
.messages { list-style:none; padding:0; }
.messages li { background:#ecfeff; border:1px solid #22d3ee; color:#0e7490; padding:.6rem .9rem; border-radius:.5rem; margin:.5rem 0; }
</file>
  <file path="templates/base.html" encoding="text">{% load static %}
&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"/&gt;
  &lt;title&gt;Opportunity App&lt;/title&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1"/&gt;
  &lt;link rel="stylesheet" href="{% static 'css/styles.css' %}"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;header class="site-header"&gt;
    &lt;div class="container header-inner"&gt;
      &lt;a class="brand" href="{% url 'welcome' %}"&gt;Opportunity App&lt;/a&gt;
      &lt;nav&gt;
        &lt;ul class="nav"&gt;
          {% if user.is_authenticated %}
            &lt;li&gt;&lt;a href="{% url 'screen1' %}"&gt;Screen 1&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="{% url 'screen2' %}"&gt;Screen 2&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="{% url 'screen3' %}"&gt;Screen 3&lt;/a&gt;&lt;/li&gt;
            &lt;li class="divider"&gt;&lt;/li&gt;
            &lt;li class="muted"&gt;Hi, {{ user.display_name }}&lt;/li&gt;
            &lt;li&gt;&lt;!-- &lt;a href="{% url 'logout' %}"&gt;Log out&lt;/a&gt; --&gt;
              &lt;form method="post" action="{% url 'logout' %}" style="display:inline"&gt;
              {% csrf_token %}
              &lt;button type="submit" class="btn"&gt;Log out&lt;/button&gt;
            &lt;/form&gt;
          &lt;/li&gt;
          {% else %}
            &lt;li&gt;&lt;a href="{% url 'login' %}"&gt;Log in&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="{% url 'register' %}"&gt;Create account&lt;/a&gt;&lt;/li&gt;
            
          {% endif %}
        &lt;/ul&gt;
      &lt;/nav&gt;
    &lt;/div&gt;
  &lt;/header&gt;

  &lt;main class="container"&gt;
    {% if messages %}
      &lt;ul class="messages"&gt;
        {% for message in messages %}
          &lt;li class="{{ message.tags }}"&gt;{{ message }}&lt;/li&gt;
        {% endfor %}
      &lt;/ul&gt;
    {% endif %}
    {% block content %}{% endblock %}
  &lt;/main&gt;

  &lt;footer class="site-footer"&gt;
    &lt;div class="container"&gt;
      &lt;small&gt;&amp;copy; {% now "Y" %} Opportunity App&lt;/small&gt;
    &lt;/div&gt;
  &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</file>
  <file path="templates/accounts/login.html" encoding="text">{% extends "base.html" %}
{% block content %}
  &lt;section class="auth-card"&gt;
    &lt;h1&gt;Sign in{% if selected_user_type %} as {{ selected_user_type|title }}{% endif %}&lt;/h1&gt;
    &lt;form method="post" novalidate&gt;
      {% csrf_token %}
      &lt;div class="form-field"&gt;
        &lt;label for="{{ form.username.id_for_label }}"&gt;{{ form.username.label }}&lt;/label&gt;
        {{ form.username }}
        {% if form.username.errors %}&lt;div class="error"&gt;{{ form.username.errors.0 }}&lt;/div&gt;{% endif %}
      &lt;/div&gt;
      &lt;div class="form-field"&gt;
        &lt;label for="{{ form.password.id_for_label }}"&gt;{{ form.password.label }}&lt;/label&gt;
        {{ form.password }}
        {% if form.password.errors %}&lt;div class="error"&gt;{{ form.password.errors.0 }}&lt;/div&gt;{% endif %}
      &lt;/div&gt;
      &lt;button class="btn primary" type="submit"&gt;Sign in&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="auth-links"&gt;
      &lt;a href="{% url 'register' %}{% if selected_user_type %}?type={{ selected_user_type }}{% endif %}"&gt;Create account&lt;/a&gt;
    &lt;/div&gt;
  &lt;/section&gt;
{% endblock %}
</file>
  <file path="templates/accounts/register.html" encoding="text">{% extends "base.html" %}
{% block content %}
  &lt;section class="auth-card"&gt;
    &lt;h1&gt;Create Account&lt;/h1&gt;
    &lt;form method="post" novalidate&gt;
      {% csrf_token %}
      &lt;div class="form-field"&gt;
        &lt;label for="{{ form.email.id_for_label }}"&gt;Email&lt;/label&gt;
        {{ form.email }}
        {% if form.email.errors %}&lt;div class="error"&gt;{{ form.email.errors.0 }}&lt;/div&gt;{% endif %}
      &lt;/div&gt;

      &lt;fieldset class="form-field"&gt;
        &lt;legend&gt;User type&lt;/legend&gt;
        {{ form.user_type }}
        {% if form.user_type.errors %}&lt;div class="error"&gt;{{ form.user_type.errors.0 }}&lt;/div&gt;{% endif %}
      &lt;/fieldset&gt;

      &lt;div class="form-field"&gt;
        &lt;label for="{{ form.password1.id_for_label }}"&gt;Password&lt;/label&gt;
        {{ form.password1 }}
        {% if form.password1.errors %}&lt;div class="error"&gt;{{ form.password1.errors.0 }}&lt;/div&gt;{% endif %}
      &lt;/div&gt;
      &lt;div class="form-field"&gt;
        &lt;label for="{{ form.password2.id_for_label }}"&gt;Confirm Password&lt;/label&gt;
        {{ form.password2 }}
        {% if form.password2.errors %}&lt;div class="error"&gt;{{ form.password2.errors.0 }}&lt;/div&gt;{% endif %}
      &lt;/div&gt;

      &lt;button class="btn primary" type="submit"&gt;Create Account&lt;/button&gt;
    &lt;/form&gt;
    &lt;div class="auth-links"&gt;
      &lt;a href="{% url 'login' %}"&gt;Back to sign in&lt;/a&gt;
    &lt;/div&gt;
  &lt;/section&gt;
{% endblock %}
</file>
  <file path="templates/pages/screen1.html" encoding="text">{% extends "base.html" %}
{% block content %}
  &lt;section class="dash-card"&gt;
    &lt;h1&gt;Screen 1 {{ role }}&lt;/h1&gt;
    &lt;p class="muted"&gt;Hello {{ request.user.display_name }} ({{ role }})&lt;/p&gt;

    {% if request.user.user_type == 'student' %}
      {% include "pages/partials/s1_student.html" %}
    {% elif request.user.user_type == 'organization' %}
      {% include "pages/partials/s1_organization.html" %}
    {% elif request.user.user_type == 'administrator' %}
      {% include "pages/partials/s1_administrator.html" %}
    {% else %}
      &lt;p&gt;No role specific content yet.&lt;/p&gt;
    {% endif %}

    &lt;div class="button-row" style="margin-top:1rem;"&gt;
      &lt;a class="btn" href="{% url 'screen2' %}"&gt;Go to Screen 2&lt;/a&gt;
      &lt;a class="btn" href="{% url 'screen3' %}"&gt;Go to Screen 3&lt;/a&gt;
    &lt;/div&gt;
  &lt;/section&gt;
{% endblock %}
</file>
  <file path="templates/pages/screen2.html" encoding="text">{% extends "base.html" %}
{% block content %}
  &lt;section class="dash-card"&gt;
    &lt;h1&gt;Screen 2 {{ role }}&lt;/h1&gt;

    {% if request.user.user_type == 'student' %}
      {% include "pages/partials/s2_student.html" %}
    {% elif request.user.user_type == 'organization' %}
      {% include "pages/partials/s2_organization.html" %}
    {% elif request.user.user_type == 'administrator' %}
      {% include "pages/partials/s2_administrator.html" %}
    {% else %}
      &lt;p&gt;No role specific content yet.&lt;/p&gt;
    {% endif %}

    &lt;a class="btn" href="{% url 'screen1' %}" style="margin-top:1rem;"&gt;← Back to Screen 1&lt;/a&gt;
  &lt;/section&gt;
{% endblock %}
</file>
  <file path="templates/pages/screen3.html" encoding="text">{% extends "base.html" %}
{% block content %}
  &lt;section class="dash-card"&gt;
    &lt;h1&gt;Screen 3 {{ role }}&lt;/h1&gt;

    {% if request.user.user_type == 'student' %}
      {% include "pages/partials/s3_student.html" %}
    {% elif request.user.user_type == 'organization' %}
      {% include "pages/partials/s3_organization.html" %}
    {% elif request.user.user_type == 'administrator' %}
      {% include "pages/partials/s3_administrator.html" %}
    {% else %}
      &lt;p&gt;No role specific content yet.&lt;/p&gt;
    {% endif %}

    &lt;a class="btn" href="{% url 'screen1' %}" style="margin-top:1rem;"&gt;← Back to Screen 1&lt;/a&gt;
  &lt;/section&gt;
{% endblock %}
</file>
  <file path="templates/pages/welcome.html" encoding="text">{% extends "base.html" %}
{% block content %}
  &lt;section class="auth-card"&gt;
    &lt;h1&gt;Welcome&lt;/h1&gt;
    &lt;p&gt;Please choose your user type to continue.&lt;/p&gt;
    &lt;div class="button-row"&gt;
      &lt;a class="btn" href="{% url 'login' %}?type=student"&gt;I am a Student&lt;/a&gt;
      &lt;a class="btn" href="{% url 'login' %}?type=organization"&gt;I am an Organization&lt;/a&gt;
      &lt;a class="btn" href="{% url 'login' %}?type=administrator"&gt;I am an Administrator&lt;/a&gt;
    &lt;/div&gt;
    &lt;p class="muted"&gt;No account? &lt;a href="{% url 'register' %}"&gt;Create one&lt;/a&gt;.&lt;/p&gt;
  &lt;/section&gt;
{% endblock %}
</file>
  <file path="templates/pages/partials/s1_administrator.html" encoding="text">&lt;h1&gt;S1 Administrator&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  <file path="templates/pages/partials/s1_organization.html" encoding="text">&lt;h1&gt;S1 Organization&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  <file path="templates/pages/partials/s1_student.html" encoding="text">&lt;h1&gt;S1 Student&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  <file path="templates/pages/partials/s2_administrator.html" encoding="text">&lt;h1&gt;S2 Administrator&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  <file path="templates/pages/partials/s2_organization.html" encoding="text">&lt;h1&gt;S2 Organization&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  <file path="templates/pages/partials/s2_student.html" encoding="text">&lt;h1&gt;S2 Student&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  <file path="templates/pages/partials/s3_administrator.html" encoding="text">&lt;h1&gt;S3 Administrator&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  <file path="templates/pages/partials/s3_organization.html" encoding="text">&lt;h1&gt;S3 Organization&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  <file path="templates/pages/partials/s3_student.html" encoding="text">&lt;h1&gt;S3 Student&lt;/h1&gt;
&lt;p&gt;This is a placeholder page.&lt;/p&gt;
</file>
  </files>
